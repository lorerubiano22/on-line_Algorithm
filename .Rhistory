listEdges<-fil[,1:2]
if(is.null(edgesRemoved)){
edgesRemoved<-listEdges
}
else{
if(dim(edgesRemoved)[1]<dim(listEdges)[1]){
edgesRemoved<-listEdges
}
}
idNodes<-unique(listEdges[,1])
idNodes<-sort(idNodes)
# la matrix contiene toda la información del nodo 1. id 2. profit 3. numero de ejes adjacentes 4. el valor de la connectividad
listNodes<-matrix(0,ncol = 4,nrow=(length(idNodes)))
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
iteration<-0
while(iteration<11){
for(i in 1:length(idNodes) ){
score<-0
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1){
for(j in 1:length(x)){
score<-listNodes[which(listNodes[,1]==x[j]),4]+score
}
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-score/listNodes[i,3] # connectivity node
}
}
iteration<-iteration+1
}
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
#3. computar la distancia promedio
averageDist<-mean(fil[,5])
averageConnectivity<-mean(listNodes[,4])
averageConnectivityNetwork<-averageConnectivity/averageDist
# 4. computar la connectividad del eje
edgeConnectivity<-matrix(0,ncol = 4,nrow=(dim(listEdges)[1]))  # 1. id origin 2. id end  3. edge connectivity 4. edge weight
for(i in 1:dim(listEdges)[1]){
edgeConnectivity[i,1]<-listEdges[i,1]
edgeConnectivity[i,2]<-listEdges[i,2]
edgeConnectivity[i,3]<-max(fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),3],fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),4])*sum(listNodes[which(listNodes[,1]==listEdges[i,1]),4], listNodes[which(listNodes[,1]==listEdges[i,2]),4])/(averageConnectivityNetwork*fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5])
}
# 5. computar los valores del peso
for(i in 1:dim(listEdges)[1]){
x<-listEdges[which(listEdges[,1]==listEdges[i,1]),2]
maxTime<-0
maxConnectivity<-0
for(j in 1:length(x)){
fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),1:2]
distance<-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),5]
connectivity<-as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==x[j]),3])
if(maxTime<distance){
maxTime<-distance
}
if(maxConnectivity<connectivity){
maxConnectivity<-connectivity
}
}
edgeConnectivity[i,4]<-alpha*(1-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5]/maxTime)+(1-alpha)*(as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==listEdges[i,2]),3])/maxConnectivity)
#edgeConnectivity[i,5]<-(abs(edgeConnectivity[i,3]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),6])<epsilon)
#edgeConnectivity[i,6]<-(abs(edgeConnectivity[i,4]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),7])<epsilon)
}
edgeC<-as.character(abs(as.numeric(edgeConnectivity[,3])-as.numeric(fil[,6]))<epsilon)
edgeW<-as.character(abs(as.numeric(edgeConnectivity[,4])-as.numeric(fil[,7]))<epsilon)
edgeConnectivity<-cbind(edgeConnectivity,edgeC)
edgeConnectivity<-cbind(edgeConnectivity,edgeW)
mat[l,5]<-all(edgeConnectivity[,5]==TRUE)
mat[l,6]<-all(edgeConnectivity[,6]==TRUE)
}
}
edgeConsolidation<-matrix(0,ncol = length(listFilesTxt)+2,nrow=dim(edgesRemoved)[1]+1)
edgeConsolidation[dim(edgesRemoved)[1]+1,1]<-c("removed_Edges")
for(i in 1:dim(edgesRemoved)[1]){
edgeConsolidation[i,1]<-edgesRemoved[i,1]
edgeConsolidation[i,2]<-edgesRemoved[i,2]
}
for(l in 1:length(listFilesTxt)){
afile<-listFilesTxt[l]
a<-strsplit(afile,"_")
nameFile[2]<-as.character(a[[1]][2])  # edge
aa<-readLines(listFilesTxt[l])
if(length(aa)>0){
fil<-read.table(listFilesTxt[l],FALSE)
for(j in 1:dim(fil)[1]){
edgeConsolidation[which(edgeConsolidation[,1]==fil[j,1] & edgeConsolidation[,2]==fil[j,2]),l+2]<-fil[j,6]
}}
edgeConsolidation[dim(edgesRemoved)[1]+1,l+2]<-as.character(a[[1]][2])
}
write.table(edgeConsolidation,"connectivity8.txt",quote=FALSE,row.names = FALSE,col.names = TRUE,sep=";")
epsilon<-0.001
#
#"C:\Users\Lorena\Documents\wokspace_Java_BOKU\on-line_Algorithm\p1.2.bAfterDisrution_16,28_Road_Network_Distances_Seed93805_P(disruption)_0.5_Validate_connectivity_weight.txt"
#"C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm"
setwd("C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm")
#dir<-c("C://Users//lorena.reyes//Dropbox//UPNA//PW//Projects//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick")
dir<-c("C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm")
setwd(dir)
listFiles<-list.files(paste(dir,sep=""))
listFilesTxt<-grep(pattern = "ValidateConnectivityWeight", listFiles, value = TRUE)
nameFile<-NULL
mat<-matrix(0,ncol = 6,nrow=(length(listFilesTxt)))
alpha<-0
edgesRemoved<-NULL
for(l in 1:length(listFilesTxt)){
#afile<-paste("p7.2.a_SOLUTION_p(disruption)_0.5_seed_123_Strategy_Conservative_OptCriterion_1100.0_weights_0.0_Output")
#setwd("C://Users//lorena.reyes//Dropbox//UPNA//PW//Projects//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick//Solution")
# setwd("C://Users//Lorena//Documents//Projects//OR_Spectrum//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick//Solution")
afile<-listFilesTxt[l]
a<-strsplit(afile,"_")
nameFile[1]<-as.character(a[[1]][1])  #instance
nameFile[2]<-as.character(a[[1]][2])  # edge
nameFile[3]<-as.numeric(a[[1]][4])  # seed
nameFile[4]<-as.numeric(a[[1]][6])   #disruption
alpha<-as.numeric(a[[1]][6])
mat[l,1:4]<-nameFile[1:4]
#fil<-read.table(listFilesTxt[l],FALSE, file.info(listFilesTxt[l])$size)
aa<-readLines(listFilesTxt[l])
if(length(aa)>0){
fil<-read.table(listFilesTxt[l],FALSE)
# buscar los ejes adjacentes para cada node
listEdges<-fil[,1:2]
if(is.null(edgesRemoved)){
edgesRemoved<-listEdges
}
else{
if(dim(edgesRemoved)[1]<dim(listEdges)[1]){
edgesRemoved<-listEdges
}
}
idNodes<-unique(listEdges[,1])
idNodes<-sort(idNodes)
# la matrix contiene toda la información del nodo 1. id 2. profit 3. numero de ejes adjacentes 4. el valor de la connectividad
listNodes<-matrix(0,ncol = 4,nrow=(length(idNodes)))
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
iteration<-0
while(iteration<11){
for(i in 1:length(idNodes) ){
score<-0
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1){
for(j in 1:length(x)){
score<-listNodes[which(listNodes[,1]==x[j]),4]+score
}
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-score/listNodes[i,3] # connectivity node
}
}
iteration<-iteration+1
}
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
#3. computar la distancia promedio
averageDist<-mean(fil[,5])
averageConnectivity<-mean(listNodes[,4])
averageConnectivityNetwork<-averageConnectivity/averageDist
# 4. computar la connectividad del eje
edgeConnectivity<-matrix(0,ncol = 4,nrow=(dim(listEdges)[1]))  # 1. id origin 2. id end  3. edge connectivity 4. edge weight
for(i in 1:dim(listEdges)[1]){
edgeConnectivity[i,1]<-listEdges[i,1]
edgeConnectivity[i,2]<-listEdges[i,2]
edgeConnectivity[i,3]<-max(fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),3],fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),4])*sum(listNodes[which(listNodes[,1]==listEdges[i,1]),4], listNodes[which(listNodes[,1]==listEdges[i,2]),4])/(averageConnectivityNetwork*fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5])
}
# 5. computar los valores del peso
for(i in 1:dim(listEdges)[1]){
x<-listEdges[which(listEdges[,1]==listEdges[i,1]),2]
maxTime<-0
maxConnectivity<-0
for(j in 1:length(x)){
fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),1:2]
distance<-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),5]
connectivity<-as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==x[j]),3])
if(maxTime<distance){
maxTime<-distance
}
if(maxConnectivity<connectivity){
maxConnectivity<-connectivity
}
}
edgeConnectivity[i,4]<-alpha*(1-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5]/maxTime)+(1-alpha)*(as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==listEdges[i,2]),3])/maxConnectivity)
#edgeConnectivity[i,5]<-(abs(edgeConnectivity[i,3]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),6])<epsilon)
#edgeConnectivity[i,6]<-(abs(edgeConnectivity[i,4]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),7])<epsilon)
}
edgeC<-as.character(abs(as.numeric(edgeConnectivity[,3])-as.numeric(fil[,6]))<epsilon)
edgeW<-as.character(abs(as.numeric(edgeConnectivity[,4])-as.numeric(fil[,7]))<epsilon)
edgeConnectivity<-cbind(edgeConnectivity,edgeC)
edgeConnectivity<-cbind(edgeConnectivity,edgeW)
mat[l,5]<-all(edgeConnectivity[,5]==TRUE)
mat[l,6]<-all(edgeConnectivity[,6]==TRUE)
}
}
edgeConsolidation<-matrix(0,ncol = length(listFilesTxt)+2,nrow=dim(edgesRemoved)[1]+1)
edgeConsolidation[dim(edgesRemoved)[1]+1,1]<-c("removed_Edges")
for(i in 1:dim(edgesRemoved)[1]){
edgeConsolidation[i,1]<-edgesRemoved[i,1]
edgeConsolidation[i,2]<-edgesRemoved[i,2]
}
for(l in 1:length(listFilesTxt)){
afile<-listFilesTxt[l]
a<-strsplit(afile,"_")
nameFile[2]<-as.character(a[[1]][2])  # edge
aa<-readLines(listFilesTxt[l])
if(length(aa)>0){
fil<-read.table(listFilesTxt[l],FALSE)
for(j in 1:dim(fil)[1]){
edgeConsolidation[which(edgeConsolidation[,1]==fil[j,1] & edgeConsolidation[,2]==fil[j,2]),l+2]<-fil[j,6]
}}
edgeConsolidation[dim(edgesRemoved)[1]+1,l+2]<-as.character(a[[1]][2])
}
write.table(edgeConsolidation,"connectivity30.txt",quote=FALSE,row.names = FALSE,col.names = TRUE,sep=";")
epsilon<-0.001
#
#"C:\Users\Lorena\Documents\wokspace_Java_BOKU\on-line_Algorithm\p1.2.bAfterDisrution_16,28_Road_Network_Distances_Seed93805_P(disruption)_0.5_Validate_connectivity_weight.txt"
#"C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm"
setwd("C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm")
#dir<-c("C://Users//lorena.reyes//Dropbox//UPNA//PW//Projects//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick")
dir<-c("C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm")
setwd(dir)
listFiles<-list.files(paste(dir,sep=""))
listFilesTxt<-grep(pattern = "ValidateConnectivityWeight", listFiles, value = TRUE)
nameFile<-NULL
mat<-matrix(0,ncol = 6,nrow=(length(listFilesTxt)))
alpha<-0
edgesRemoved<-NULL
for(l in 1:length(listFilesTxt)){
#afile<-paste("p7.2.a_SOLUTION_p(disruption)_0.5_seed_123_Strategy_Conservative_OptCriterion_1100.0_weights_0.0_Output")
#setwd("C://Users//lorena.reyes//Dropbox//UPNA//PW//Projects//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick//Solution")
# setwd("C://Users//Lorena//Documents//Projects//OR_Spectrum//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick//Solution")
afile<-listFilesTxt[l]
a<-strsplit(afile,"_")
nameFile[1]<-as.character(a[[1]][1])  #instance
nameFile[2]<-as.character(a[[1]][2])  # edge
nameFile[3]<-as.numeric(a[[1]][4])  # seed
nameFile[4]<-as.numeric(a[[1]][6])   #disruption
alpha<-as.numeric(a[[1]][6])
mat[l,1:4]<-nameFile[1:4]
#fil<-read.table(listFilesTxt[l],FALSE, file.info(listFilesTxt[l])$size)
aa<-readLines(listFilesTxt[l])
if(length(aa)>0){
fil<-read.table(listFilesTxt[l],FALSE)
# buscar los ejes adjacentes para cada node
listEdges<-fil[,1:2]
if(is.null(edgesRemoved)){
edgesRemoved<-listEdges
}
else{
if(dim(edgesRemoved)[1]<dim(listEdges)[1]){
edgesRemoved<-listEdges
}
}
idNodes<-unique(listEdges[,1])
idNodes<-sort(idNodes)
# la matrix contiene toda la información del nodo 1. id 2. profit 3. numero de ejes adjacentes 4. el valor de la connectividad
listNodes<-matrix(0,ncol = 4,nrow=(length(idNodes)))
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
iteration<-0
while(iteration<11){
for(i in 1:length(idNodes) ){
score<-0
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1){
for(j in 1:length(x)){
score<-listNodes[which(listNodes[,1]==x[j]),4]+score
}
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-score/listNodes[i,3] # connectivity node
}
}
iteration<-iteration+1
}
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
#3. computar la distancia promedio
averageDist<-mean(fil[,5])
averageConnectivity<-mean(listNodes[,4])
averageConnectivityNetwork<-averageConnectivity/averageDist
# 4. computar la connectividad del eje
edgeConnectivity<-matrix(0,ncol = 4,nrow=(dim(listEdges)[1]))  # 1. id origin 2. id end  3. edge connectivity 4. edge weight
for(i in 1:dim(listEdges)[1]){
edgeConnectivity[i,1]<-listEdges[i,1]
edgeConnectivity[i,2]<-listEdges[i,2]
edgeConnectivity[i,3]<-max(fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),3],fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),4])*sum(listNodes[which(listNodes[,1]==listEdges[i,1]),4], listNodes[which(listNodes[,1]==listEdges[i,2]),4])/(averageConnectivityNetwork*fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5])
}
# 5. computar los valores del peso
for(i in 1:dim(listEdges)[1]){
x<-listEdges[which(listEdges[,1]==listEdges[i,1]),2]
maxTime<-0
maxConnectivity<-0
for(j in 1:length(x)){
fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),1:2]
distance<-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),5]
connectivity<-as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==x[j]),3])
if(maxTime<distance){
maxTime<-distance
}
if(maxConnectivity<connectivity){
maxConnectivity<-connectivity
}
}
edgeConnectivity[i,4]<-alpha*(1-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5]/maxTime)+(1-alpha)*(as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==listEdges[i,2]),3])/maxConnectivity)
#edgeConnectivity[i,5]<-(abs(edgeConnectivity[i,3]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),6])<epsilon)
#edgeConnectivity[i,6]<-(abs(edgeConnectivity[i,4]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),7])<epsilon)
}
edgeC<-as.character(abs(as.numeric(edgeConnectivity[,3])-as.numeric(fil[,6]))<epsilon)
edgeW<-as.character(abs(as.numeric(edgeConnectivity[,4])-as.numeric(fil[,7]))<epsilon)
edgeConnectivity<-cbind(edgeConnectivity,edgeC)
edgeConnectivity<-cbind(edgeConnectivity,edgeW)
mat[l,5]<-all(edgeConnectivity[,5]==TRUE)
mat[l,6]<-all(edgeConnectivity[,6]==TRUE)
}
}
edgeConsolidation<-matrix(0,ncol = length(listFilesTxt)+2,nrow=dim(edgesRemoved)[1]+1)
edgeConsolidation[dim(edgesRemoved)[1]+1,1]<-c("removed_Edges")
for(i in 1:dim(edgesRemoved)[1]){
edgeConsolidation[i,1]<-edgesRemoved[i,1]
edgeConsolidation[i,2]<-edgesRemoved[i,2]
}
for(l in 1:length(listFilesTxt)){
afile<-listFilesTxt[l]
a<-strsplit(afile,"_")
nameFile[2]<-as.character(a[[1]][2])  # edge
aa<-readLines(listFilesTxt[l])
if(length(aa)>0){
fil<-read.table(listFilesTxt[l],FALSE)
for(j in 1:dim(fil)[1]){
edgeConsolidation[which(edgeConsolidation[,1]==fil[j,1] & edgeConsolidation[,2]==fil[j,2]),l+2]<-fil[j,6]
}}
edgeConsolidation[dim(edgesRemoved)[1]+1,l+2]<-as.character(a[[1]][2])
}
write.table(edgeConsolidation,"connectivity55.txt",quote=FALSE,row.names = FALSE,col.names = TRUE,sep=";")
View(edgeConsolidation)
View(edgeConsolidation)
epsilon<-0.001
#
#"C:\Users\Lorena\Documents\wokspace_Java_BOKU\on-line_Algorithm\p1.2.bAfterDisrution_16,28_Road_Network_Distances_Seed93805_P(disruption)_0.5_Validate_connectivity_weight.txt"
#"C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm"
setwd("C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm")
#dir<-c("C://Users//lorena.reyes//Dropbox//UPNA//PW//Projects//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick")
dir<-c("C://Users//Lorena//Documents//wokspace_Java_BOKU//on-line_Algorithm")
setwd(dir)
listFiles<-list.files(paste(dir,sep=""))
listFilesTxt<-grep(pattern = "ValidateConnectivityWeight", listFiles, value = TRUE)
nameFile<-NULL
mat<-matrix(0,ncol = 6,nrow=(length(listFilesTxt)))
alpha<-0
edgesRemoved<-NULL
for(l in 1:length(listFilesTxt)){
#afile<-paste("p7.2.a_SOLUTION_p(disruption)_0.5_seed_123_Strategy_Conservative_OptCriterion_1100.0_weights_0.0_Output")
#setwd("C://Users//lorena.reyes//Dropbox//UPNA//PW//Projects//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick//Solution")
# setwd("C://Users//Lorena//Documents//Projects//OR_Spectrum//BOKU_UPNA//OR_Spectrum//PatricksArticle//outputsPatrick//Solution")
afile<-listFilesTxt[l]
a<-strsplit(afile,"_")
nameFile[1]<-as.character(a[[1]][1])  #instance
nameFile[2]<-as.character(a[[1]][2])  # edge
nameFile[3]<-as.numeric(a[[1]][4])  # seed
nameFile[4]<-as.numeric(a[[1]][6])   #disruption
alpha<-as.numeric(a[[1]][6])
mat[l,1:4]<-nameFile[1:4]
#fil<-read.table(listFilesTxt[l],FALSE, file.info(listFilesTxt[l])$size)
aa<-readLines(listFilesTxt[l])
if(length(aa)>0){
fil<-read.table(listFilesTxt[l],FALSE)
# buscar los ejes adjacentes para cada node
listEdges<-fil[,1:2]
if(is.null(edgesRemoved)){
edgesRemoved<-listEdges
}
else{
if(dim(edgesRemoved)[1]<dim(listEdges)[1]){
edgesRemoved<-listEdges
}
}
idNodes<-unique(listEdges[,1])
idNodes<-sort(idNodes)
# la matrix contiene toda la información del nodo 1. id 2. profit 3. numero de ejes adjacentes 4. el valor de la connectividad
listNodes<-matrix(0,ncol = 4,nrow=(length(idNodes)))
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
iteration<-0
while(iteration<11){
for(i in 1:length(idNodes) ){
score<-0
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1){
for(j in 1:length(x)){
score<-listNodes[which(listNodes[,1]==x[j]),4]+score
}
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-score/listNodes[i,3] # connectivity node
}
}
iteration<-iteration+1
}
for(i in 1:length(idNodes) ){
listNodes[i,1]<-  idNodes[i] # id nodes
listNodes[i,2]<- unique( fil[which(fil[,1]==idNodes[i]),3])# static score
x<-listEdges[which(listEdges[,1]==listNodes[i]),2]
if(listNodes[i,2]==1.1){
listNodes[i,3]<-length(x) # total adjacent edges
listNodes[i,4]<-listNodes[i,2]/listNodes[i,3] # connectivity node
}
}
#3. computar la distancia promedio
averageDist<-mean(fil[,5])
averageConnectivity<-mean(listNodes[,4])
averageConnectivityNetwork<-averageConnectivity/averageDist
# 4. computar la connectividad del eje
edgeConnectivity<-matrix(0,ncol = 4,nrow=(dim(listEdges)[1]))  # 1. id origin 2. id end  3. edge connectivity 4. edge weight
for(i in 1:dim(listEdges)[1]){
edgeConnectivity[i,1]<-listEdges[i,1]
edgeConnectivity[i,2]<-listEdges[i,2]
edgeConnectivity[i,3]<-max(fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),3],fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),4])*sum(listNodes[which(listNodes[,1]==listEdges[i,1]),4], listNodes[which(listNodes[,1]==listEdges[i,2]),4])/(averageConnectivityNetwork*fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5])
}
# 5. computar los valores del peso
for(i in 1:dim(listEdges)[1]){
x<-listEdges[which(listEdges[,1]==listEdges[i,1]),2]
maxTime<-0
maxConnectivity<-0
for(j in 1:length(x)){
fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),1:2]
distance<-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==x[j]),5]
connectivity<-as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==x[j]),3])
if(maxTime<distance){
maxTime<-distance
}
if(maxConnectivity<connectivity){
maxConnectivity<-connectivity
}
}
edgeConnectivity[i,4]<-alpha*(1-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),5]/maxTime)+(1-alpha)*(as.numeric(edgeConnectivity[which(edgeConnectivity[,1]==listEdges[i,1] & edgeConnectivity[,2]==listEdges[i,2]),3])/maxConnectivity)
#edgeConnectivity[i,5]<-(abs(edgeConnectivity[i,3]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),6])<epsilon)
#edgeConnectivity[i,6]<-(abs(edgeConnectivity[i,4]-fil[which(fil[,1]==listEdges[i,1] & fil[,2]==listEdges[i,2]),7])<epsilon)
}
edgeC<-as.character(abs(as.numeric(edgeConnectivity[,3])-as.numeric(fil[,6]))<epsilon)
edgeW<-as.character(abs(as.numeric(edgeConnectivity[,4])-as.numeric(fil[,7]))<epsilon)
edgeConnectivity<-cbind(edgeConnectivity,edgeC)
edgeConnectivity<-cbind(edgeConnectivity,edgeW)
mat[l,5]<-all(edgeConnectivity[,5]==TRUE)
mat[l,6]<-all(edgeConnectivity[,6]==TRUE)
}
}
edgeConsolidation<-matrix(0,ncol = length(listFilesTxt)+2,nrow=dim(edgesRemoved)[1]+1)
edgeConsolidation[dim(edgesRemoved)[1]+1,1]<-c("removed_Edges")
for(i in 1:dim(edgesRemoved)[1]){
edgeConsolidation[i,1]<-edgesRemoved[i,1]
edgeConsolidation[i,2]<-edgesRemoved[i,2]
}
for(l in 1:length(listFilesTxt)){
afile<-listFilesTxt[l]
a<-strsplit(afile,"_")
nameFile[2]<-as.character(a[[1]][2])  # edge
aa<-readLines(listFilesTxt[l])
if(length(aa)>0){
fil<-read.table(listFilesTxt[l],FALSE)
for(j in 1:dim(fil)[1]){
edgeConsolidation[which(edgeConsolidation[,1]==fil[j,1] & edgeConsolidation[,2]==fil[j,2]),l+2]<-fil[j,6]
}}
edgeConsolidation[dim(edgesRemoved)[1]+1,l+2]<-as.character(a[[1]][2])
}
write.table(edgeConsolidation,"connectivity55.txt",quote=FALSE,row.names = FALSE,col.names = TRUE,sep=";")
View(edgeConsolidation)
