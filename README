CLEANING PROCEDURE

1. Nodes coordinate of the road network (G)
2. Para cada intermediate node se calcula la ruta más corta al depot
if(existe una ruta desde el intermediate node al depot){
3. Se crea una copia de la road network (G')
4. Se elimina el depot de G'
5. Para cada intermediate node se calcula la ruta más corta a al menos una victima
if(existe una ruta para al menos una victima){
el nodo permanece en la red}
else{el intermediate nodo se elimina}
else{el intemediate nodo se elimina}

NOTES:



Class: NETWORK

1. Reading the coordinates
2. Generation of road connections
3. Generation of the road network // se asume que el depot no esta conectado con el depot

Class: DISASTER

This class could be replaced by online information. The output of this class is the information that we nwws to detect
The disrupted network is created under the following consideration:
In advance is randomly defined the connections which are missing in the road network
Then the disruption are located on the edge.

Procedure to locate the disruptions on the edge

1. Identify in the road connection which edges are disrupted
2. Select the road connection
3. Select the road network
4. Copy the road conection into the disrupted road conection network
5. Select the disrupted connections
6. Start to read the road connection and compare against disrupted edges
if connection is disrupted
        1. remove the disrupted edge from the road conection network
2. select the list of random nodes of the edge
2.randomly set a disruption node
7. Copy the road network itno the disrupted road network


Class: UpdateRoadInformation

edgeRoadConnection-> represents the connections.
edgeRoadNetwork-> represents the road, it considers the road crossings

This class is the interface between the on-line routing and the assesment process

Note: Assessment process is where the priorities are estimated


Class: shortpathXpress

1. Setting problems parameters
2. TSP problem-> Min. travel distance

Note: it returns a boolean variable-> true: if the node belongs to a route from depot to (at least) a victim 